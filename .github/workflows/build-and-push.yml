---
name: Build and Push Container Image

on:
  workflow_dispatch:
    inputs:
      registry:
        description: 'Container registry URL'
        required: false
        default: 'ghcr.io'
        type: string
      image_name:
        description: 'Container image name'
        required: false
        default: 'vaulpner'
        type: string
      production_tag:
        description: 'Production image tag'
        required: false
        default: 'latest'
        type: string
      debug_tag:
        description: 'Debug image tag'
        required: false
        default: 'debug'
        type: string
      push_images:
        description: 'Whether to push images to registry'
        required: false
        default: true
        type: boolean
      build_production:
        description: 'Whether to build production image'
        required: false
        default: true
        type: boolean
      build_debug:
        description: 'Whether to build debug image'
        required: false
        default: true
        type: boolean
    # outputs:
    #   build_status:
    #     description: 'Build status'
    #     value: ${{ jobs.build-and-push.outputs.build_status }}

env:
  REGISTRY: ${{ inputs.registry }}
  IMAGE_NAME: ${{ inputs.image_name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      build_status: ${{ job.status }}
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        if: ${{ inputs.push_images }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 4

      - name: Build and push production image
        if: ${{ inputs.build_production }}
        id: production
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Containerfile
          push: ${{ inputs.push_images }}
          tags: |
            - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ inputs.production_tag }}
          provenance: true
          sbom: true

      - name: Build and push debug image
        if: ${{ inputs.build_debug }}
        id: debug
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Containerfile
          push: ${{ inputs.push_images }}
          target: debug
          tags: |
            - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ inputs.debug_tag }}
          provenance: true
          sbom: true

      - name: Generate build summary
        if: always()
        run: |
          echo "## Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" \
            >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.push_images }}" = "true" ]; then
            echo "âœ… **Images pushed to registry**" >> $GITHUB_STEP_SUMMARY
          else
            echo "ðŸ”¨ **Images built locally**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.build_production }}" = "true" ]; then
            echo "### Production Image" >> $GITHUB_STEP_SUMMARY
            echo "**Tags:** ${{ inputs.production_tag }}" \
              >> $GITHUB_STEP_SUMMARY
            echo "- **Base:** Distroless (minimal, secure)" \
              >> $GITHUB_STEP_SUMMARY
            echo "- **Binary:** Release build (optimized)" \
              >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ inputs.build_debug }}" = "true" ]; then
            echo "### Debug Image" >> $GITHUB_STEP_SUMMARY
            echo "**Tags:** ${{ inputs.debug_tag }}" \
              >> $GITHUB_STEP_SUMMARY
            echo "- **Base:** Ubuntu 22.04" \
              >> $GITHUB_STEP_SUMMARY
            echo "- **Binary:** Debug build (with symbols)" >> $GITHUB_STEP_SUMMARY
            echo "- **Tools:** gdb, valgrind, strace, etc." >> $GITHUB_STEP_SUMMARY
            echo "- **Source:** Included for debugging" >> $GITHUB_STEP_SUMMARY
          fi
