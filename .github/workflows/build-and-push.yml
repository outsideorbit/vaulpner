---
name: Build and Push Container Image

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.github/workflows/README.md'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: vaulpner

jobs:
  rust-checks:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    strategy:
      matrix:
        check: [check, clippy, fmt, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Run ${{ matrix.check }}
        run: |
          case "${{ matrix.check }}" in
            check)
              cargo check --all-targets
              ;;
            clippy)
              cargo clippy --all-targets -- -D warnings
              ;;
            fmt)
              cargo fmt -- --check
              ;;
            test)
              cargo test --all-targets
              ;;
          esac

  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    needs: rust-checks
    permissions:
      contents: write
      packages: write
      id-token: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Semantic Version
        id: version
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: |
            (BREAKING CHANGE|BREAKING|feat!|^feat.*!:)
          minor_pattern: "(^feat:)"
          patch_pattern: |
            (^fix:|^chore:|^docs:|^style:|^refactor:|^perf:|^test:)
          version_format: "${major}.${minor}.${patch}"
          search_commit_body: true
          debug: true

      - name: Debug version outputs
        run: |
          echo "=== Version Outputs Debug ==="
          echo "new_version: '${{ steps.version.outputs.new_version }}'"
          echo "version: '${{ steps.version.outputs.version }}'"
          echo "major: '${{ steps.version.outputs.major }}'"
          echo "minor: '${{ steps.version.outputs.minor }}'"
          echo "patch: '${{ steps.version.outputs.patch }}'"
          echo "============================="

      - name: Set version with fallback
        id: set-version
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          if [ -z "$VERSION" ]; then
            VERSION="${{ steps.version.outputs.version }}"
          fi
          if [ -z "$VERSION" ]; then
            # Fallback to current version from Cargo.toml
            VERSION=$(grep '^version = ' Cargo.toml | \
              sed 's/version = "\(.*\)"/\1/')
            echo "Using fallback version from Cargo.toml: $VERSION"
          fi
          echo "Final version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update Cargo.toml version
        run: |
          VERSION="${{ steps.set-version.outputs.version }}"
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | \
            sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $VERSION"

          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
            echo "Updated Cargo.toml from $CURRENT_VERSION to $VERSION"
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          else
            echo "Version unchanged, no update needed"
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          fi
          cat Cargo.toml | grep '^version = '

      - name: Commit and push version update
        if: ${{ env.VERSION_CHANGED == 'true' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Cargo.toml
          git commit -m \
            "chore: bump version to ${{ steps.set-version.outputs.version }} [skip ci]"
          git push

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
          config-inline: |
            [worker.oci]
              max-parallelism = 4

      - name: Build and push production image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Containerfile
          push: true
          target: release
          tags: |
            - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.set-version.outputs.version }}
            - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.set-version.outputs.major }}
            - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.set-version.outputs.major }}.${{ steps.set-version.outputs.minor }}
          provenance: true
          sbom: true

      - name: Build and push debug image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Containerfile
          push: true
          target: debug
          tags: |
            - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:debug
            - ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:debug-${{ steps.set-version.outputs.version }}
          provenance: true
          sbom: true

      - name: Generate build summary
        if: always()
        run: |
          echo "## Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.set-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "âœ… **Images pushed to registry**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production Image" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** ${{ steps.set-version.outputs.version }}, latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Base:** Distroless (minimal, secure)" >> $GITHUB_STEP_SUMMARY
          echo "- **Binary:** Release build (optimized)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Debug Image" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** debug, debug-${{ steps.set-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base:** Ubuntu 22.04" >> $GITHUB_STEP_SUMMARY
          echo "- **Binary:** Debug build (with symbols)" >> $GITHUB_STEP_SUMMARY
          echo "- **Tools:** gdb, valgrind, strace, etc." >> $GITHUB_STEP_SUMMARY
          echo "- **Source:** Included for debugging" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-platform:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Provenance:** Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM:** Generated" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache:** GitHub Actions cache enabled" >> $GITHUB_STEP_SUMMARY
