name: Build and Push Container Image

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Custom image tag'
        required: false
        type: string
        default: 'latest'
      push_to_registry:
        description: 'Push image to registry'
        required: false
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: vaulpner

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine Semantic Version
        id: version
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          format: "${major}.${minor}.${patch}"
          bump: "auto"
          version-format: "semver"
          major-pattern: "(MAJOR)"
          minor-pattern: "(MINOR)"
          patch-pattern: "(PATCH)"
      
      - name: Update Cargo.toml Version
        if: steps.version.outputs.new_version != ''
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          echo "Updating Cargo.toml to version $VERSION"
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
          echo "Updated Cargo.toml:"
          grep '^version = ' Cargo.toml
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v4
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
      
      - name: Log in to Container Registry
        if: inputs.push_to_registry != false
        uses: docker/login-action@v4
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
      
      - name: Run Rust checks
        run: |
          cargo check --all-targets
          cargo clippy --all-targets -- -D warnings
          cargo fmt -- --check
          cargo test --all-targets
      
      - name: Build and push container image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Containerfile
          push: ${{ inputs.push_to_registry != false }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true
      
      - name: Generate build summary
        if: always()
        run: |
          echo "## Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.push_to_registry }}" != "false" ]; then
            echo "✅ **Image pushed to registry**" >> $GITHUB_STEP_SUMMARY
            echo "**Tags:** ${{ steps.version.outputs.new_version }}, latest" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Image built locally (not pushed)**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-platform:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Provenance:** Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM:** Generated" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache:** GitHub Actions cache enabled" >> $GITHUB_STEP_SUMMARY
