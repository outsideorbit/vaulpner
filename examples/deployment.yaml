# Example Kubernetes deployment for vaulpner as a sidecar
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault-with-vaulpner
  namespace: vault
  labels:
    app: vault
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
    spec:
      serviceAccountName: vault-service-account
      containers:
      # Vault container
      - name: vault
        image: hashicorp/vault:latest
        ports:
        - containerPort: 8200
          name: http
        env:
        - name: VAULT_DEV_LISTEN_ADDRESS
          value: "0.0.0.0:8200"
        - name: VAULT_DEV_ROOT_TOKEN_ID
          value: "dev-token"
        command: ["vault", "server", "-dev"]
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /v1/sys/health
            port: 8200
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /v1/sys/health
            port: 8200
          initialDelaySeconds: 5
          periodSeconds: 5
      
      # vaulpner sidecar container
      - name: vaulpner
        image: ghcr.io/outsideorbit/vaulpner:latest
        env:
        - name: VAULT_ADDR
          value: "http://localhost:8200"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: RUST_LOG
          value: "info"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        # Health check for vaulpner (if implemented)
        # livenessProbe:
        #   exec:
        #     command:
        #     - /bin/sh
        #     - -c
        #     - "ps aux | grep vaulpner | grep -v grep"
        #   initialDelaySeconds: 30
        #   periodSeconds: 30
---
# Service for Vault
apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: vault
  labels:
    app: vault
spec:
  selector:
    app: vault
  ports:
  - port: 8200
    targetPort: 8200
    name: http
  type: ClusterIP
---
# ServiceAccount for vaulpner
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-service-account
  namespace: vault
---
# Role for secret management
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-secret-manager
  namespace: vault
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "update", "patch", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
---
# RoleBinding for secret management
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-secret-manager
  namespace: vault
subjects:
- kind: ServiceAccount
  name: vault-service-account
  namespace: vault
roleRef:
  kind: Role
  name: vault-secret-manager
  apiGroup: rbac.authorization.k8s.io
